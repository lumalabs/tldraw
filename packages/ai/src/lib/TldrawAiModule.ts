import { Box, Editor, FileHelpers, structuredClone } from 'tldraw'
import { defaultApplyChange } from './defaultApplyChange'
import { TldrawAiTransformConstructor } from './TldrawAiTransform'
import { TLAiChange, TLAiContent, TLAiPrompt } from './types'
import { TldrawAiApplyFn, TldrawAiPromptOptions } from './useTldrawAi'
import { asMessage } from './utils'

/** @public */
export interface TldrawAiModuleOptions {
	editor: Editor
	transforms?: TldrawAiTransformConstructor[]
	apply?: TldrawAiApplyFn
}

/**
 * The AI manager for tldraw. This class is used to produce prompts for the AI
 * using data from the editor, and to update the editor based on the
 * changes generated by the AI.
 *
 * @public
 */
export class TldrawAiModule {
	constructor(public readonly opts = {} as TldrawAiModuleOptions) {}

	dispose() {}

	/**
	 * Creates and prepare a prompt, returning the prompt
	 * and a function to handle changes.
	 *
	 * @param options - The user's message or a configuration for the prompt
	 */
	async generate(options: TldrawAiPromptOptions) {
		const { transforms: _transformCtors = [] } = this.opts
		const transforms = _transformCtors.map((ctor) => new ctor(this.opts.editor))

		let prompt = await this.getPrompt(options)

		for (const transform of transforms) {
			if (transform.transformPrompt) {
				prompt = transform.transformPrompt(prompt)
			}
		}

		transforms.reverse()

		const handleChange = (change: TLAiChange) => {
			for (const transform of transforms) {
				if (transform.transformChange) {
					change = transform.transformChange(change)
				}
			}
			this.applyChange(change)
		}

		const handleChanges = (changes: TLAiChange[]) => {
			for (const transform of transforms) {
				if (transform.transformChanges) {
					changes = transform.transformChanges(changes)
				}
			}

			for (const change of changes) {
				this.applyChange(change)
			}
		}

		return {
			prompt,
			handleChange,
			handleChanges,
		}
	}

	/**
	 * Apply a change to the editor.
	 *
	 * @param change - The change to apply
	 */
	applyChange(change: TLAiChange) {
		const applyFn = this.opts.apply ?? defaultApplyChange
		applyFn({ change, editor: this.opts.editor })
	}

	/**
	 * Create the prompt to be sent to the AI.
	 *
	 * @param options - The options to generate the prompt
	 */
	async getPrompt(options: TldrawAiPromptOptions): Promise<TLAiPrompt> {
		const { editor } = this.opts

		const _options = typeof options === 'string' ? { message: options } : options

		const contextBounds = _options.contextBounds ?? editor.getViewportPageBounds()
		const promptBounds = _options.promptBounds ?? editor.getViewportPageBounds()
		const content = _options.canvasContent ?? this.getContent(contextBounds)
		const image = _options.image ?? (await this.getImage(content))

		return {
			message: asMessage(_options.message ?? ''),
			canvasContent: content,
			contextBounds: roundBox(contextBounds),
			promptBounds: roundBox(promptBounds),
			image,
			meta: _options.meta,
		}
	}

	/**
	 * Get the content from the current page.
	 *
	 * @param bounds - The bounds to get the content for
	 */
	private getContent(bounds: Box): TLAiContent {
		const { editor } = this.opts

		let content: TLAiContent | undefined = {
			bindings: [],
			shapes: [],
			assets: [],
			...editor.getContentFromCurrentPage(
				editor
					.getCurrentPageShapesSorted()
					.filter((s) => bounds.includes(editor.getShapeMaskedPageBounds(s)!))
			),
		}

		// If we don't have content, it's either an empty page or an empty section of the page.
		// This is an acceptable case; but let's send along an empty content instead of undefined.
		if (content) {
			// the content is a TLContent, but we want to omit the schema for TLAiContent
			content.shapes = structuredClone(content.shapes)
			content.bindings = structuredClone(content.bindings)
			delete (content as any).schema
			delete (content as any).rootShapeIds
		} else {
			content = {
				shapes: [],
				bindings: [],
				assets: [],
			}
		}

		return content
	}

	/**
	 * Get a screenshot (data URL) of the prompt's content
	 *
	 * @param content - The content to get the image from
	 */
	private async getImage(content: TLAiContent) {
		if (!content.shapes.length) return undefined

		const result = await this.opts.editor.toImage(content.shapes, {
			format: 'jpeg',
			background: false,
			darkMode: false,
			padding: 10, // will the context bounds take into account the padding?
		})

		return await FileHelpers.blobToDataUrl(result.blob)
	}
}

function roundBox(box: Box) {
	const b = box.clone()
	b.x = Math.round(b.x)
	b.y = Math.round(b.y)
	b.width = Math.round(b.width)
	b.height = Math.round(b.height)
	return b
}
